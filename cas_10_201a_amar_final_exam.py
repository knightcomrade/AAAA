# -*- coding: utf-8 -*-
"""CAS-10-201A_AMAR_FINAL EXAM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18gunibLuf_Lb0QcnLRoy-VApd3r7QN5O
"""

!pip install pandas
!pip install numpy
!pip install matplotlib
!pip install statsmodels

import pandas as pd
pd.options.mode.chained_assignment = None  
import numpy as np 
import matplotlib.pyplot as plt
from statsmodels.tsa.holtwinters import Holt
from sklearn.preprocessing import MinMaxScaler

"""**EXPLANATION ON USING HOLT-WINTER'S MODEL**

According to SolarWinds (2019), Holt-Winter's model is a way to forecast several data using timeseries related data. Now, in order to compensate with the time frame given before the deadline of the finals exam, the student opted to use Holt-Winter instead of the expected ARIMA since H-W is faster to understand. Thank you for understanding.

*   SolarWinds (2019, December 19) *Holt-Winters Forecasting and Exponential Smoothing Simplified*. https://orangematter.solarwinds.com/2019/12/15/holt-winters-forecasting-simplified/


NOTE: I would've used ARIMA prediction entirelt with Holt-Winter but for some reason the model.fit function won't work properly and I ran out of time figuring out the reason why its not working. Although I could've used SKLearn, I don't have the mental capacity to debug the source code I found to fit with the data given. Also it would be completely hypocritical of me to just copy and paste codes i

# CODES DERIVED FROM

*   https://www.kaggle.com/code/jihyeseo/visualize-sunspot-count-count-past-hundred-years/notebook
*   https://stackoverflow.com/questions/20625582/how-to-deal-with-settingwithcopywarning-in-pandas
*   https://github.com/krishnasrujan/predicting-sunspots-using-arima/blob/master/predicting-sunspots-using-arima.ipynb
*   https://stackoverflow.com/questions/14940743/selecting-excluding-sets-of-columns-in-pandas
*   https://stackoverflow.com/questions/25146121/extracting-just-month-and-year-separately-from-pandas-datetime-column
*   https://github.com/brewersey/sunspots/blob/master/LSTM-Sunpots-tn_b.ipynb

# DAILY
"""

sunspots = pd.read_csv('SIDC-SUNSPOTS_D.csv')
sunspots['Daily Sunspot Number'] = sunspots['Daily Sunspot Number'].fillna(0)
sunspots['Date'] = pd.to_datetime(sunspots['Date'])
sunspots



daily = sunspots.loc[(sunspots['Date'] >= '1749') & (sunspots['Date'] <= '2018')]
daily = daily[daily.columns[~daily.columns.isin(['Number of Observations','Definitive/Provisional Indicator','Standard Deviation'])]]
daily

Y = daily['Daily Sunspot Number']
X = [x for x in range(0, len(Y))]

fig, ax = plt.subplots(1,1, figsize=(20,7))
plt.title("Daily Sunspot Count")
plt.xlabel("Day")
plt.ylabel("Sunspot Count")
plt.plot(X, Y)

np.random.seed()
scaler = MinMaxScaler()
Y1 = scaler.fit_transform(Y.values.reshape(-1,1))
fig, ax = plt.subplots(1,1, figsize=(20,7))
plt.title("Reshaped Plot")
plt.xlabel("Day")
plt.ylabel("Reshaped Sunspot Count")
plt.plot(X, Y1)

count = int(daily.shape[0]*0.8)
Train = daily[:count]
Test = daily[count:]

y_hat_avg = Test.copy()
fit1 = Holt(np.asarray(Train['Daily Sunspot Number'])).fit()

plt.figure(figsize=(20,7))
plt.title("Train Plot")
plt.xlabel("Day")
plt.ylabel("Daily Sunspot Count")
plt.plot(Train.index, Train['Daily Sunspot Number'])

plt.figure(figsize=(10,7))
plt.title("Test Plot")
plt.xlabel("Day")
plt.ylabel("Daily Sunspot Count")
plt.plot(Test.index,Test['Daily Sunspot Number'], color='orange')

plt.figure(figsize=(30,7))
plt.title("Train + Test Plot")
plt.xlabel("Day")
plt.ylabel("Daily Sunspot Count")
plt.plot(Train.index, Train['Daily Sunspot Number'], label='Train')
plt.plot(Test.index,Test['Daily Sunspot Number'], label='Test')
plt.legend(loc='best')

Predict_Daily = pd.DataFrame(data = {'Time_step':X,
                                             'Observed': Y, 
                                             'Train_Prediction': Train['Daily Sunspot Number'], 
                                             'Test_Prediction':Test['Daily Sunspot Number']},
                                    index = Y.index,)
Predict_Daily

plt.figure(figsize=(30,7))
plt.title("Prediction Plot")
plt.xlabel("Day")
plt.ylabel("Daily Sunspot Count")
plt.plot(Predict_Daily.index, Predict_Daily.Observed)

plt.figure(figsize=(30,7))
plt.title("Prediction Plot Comparison")
plt.xlabel("Day")
plt.ylabel("Daily Sunspot Count")
plt.plot(Predict_Daily.index, Predict_Daily.Observed, c = 'black')
plt.scatter(Predict_Daily.index, Predict_Daily.Train_Prediction, 
            marker = 'o', c = 'blue', alpha = 0.75)
plt.scatter(Predict_Daily.index, Predict_Daily.Test_Prediction, 
            marker = 'o', c = 'orange', alpha = 0.75)
plt.show()

"""# MONTHLY"""

sunspots2 = pd.read_csv('SIDC-SUNSPOTS_13.csv')
sunspots2['13-Month Smoothed Total Sunspot Number'] = sunspots2['13-Month Smoothed Total Sunspot Number'].fillna(0)
sunspots2['Date'] = pd.to_datetime(sunspots2['Date'])
sunspots2

monthly = sunspots2.loc[(sunspots2['Date'] >= '1749') & (sunspots2['Date'] <= '2018')]
monthly = monthly[monthly.columns[~monthly.columns.isin(['Number of Observations','Definitive/Provisional Indicator','Monthly Mean Standard Deviation'])]]
monthly

Y = monthly['13-Month Smoothed Total Sunspot Number']
X = [x for x in range(0, len(Y))]

fig, ax = plt.subplots(1,1, figsize=(20,7))
plt.title("Monthly Sunspot Count")
plt.xlabel("Month")
plt.ylabel("Sunspot Count")
plt.plot(X, Y)

np.random.seed()
scaler = MinMaxScaler()
Y1 = scaler.fit_transform(Y.values.reshape(-1,1))
fig, ax = plt.subplots(1,1, figsize=(20,7))
plt.title("Reshaped Plot")
plt.xlabel("Month")
plt.ylabel("Reshaped Sunspot Count")
plt.plot(X, Y1)

count = int(monthly.shape[0]*0.8)
Train = monthly[:count]
Test = monthly[count:]

y_hat_avg = Test.copy()
fit1 = Holt(np.asarray(Train['13-Month Smoothed Total Sunspot Number'])).fit()

plt.figure(figsize=(20,7))
plt.title("Train Plot")
plt.xlabel("Month")
plt.ylabel("Sunspot Count")
plt.plot(Train.index, Train['13-Month Smoothed Total Sunspot Number'])

plt.figure(figsize=(10,7))
plt.title("Test Plot")
plt.xlabel("Month")
plt.ylabel("Sunspot Count")
plt.plot(Test.index,Test['13-Month Smoothed Total Sunspot Number'], color='orange')

plt.figure(figsize=(30,7))
plt.title("Train + Test Plot")
plt.xlabel("Month")
plt.ylabel("Sunspot Count")
plt.plot(Train.index, Train['13-Month Smoothed Total Sunspot Number'], label='Train')
plt.plot(Test.index,Test['13-Month Smoothed Total Sunspot Number'], label='Test')
plt.legend(loc='best')

Predict_Monthly = pd.DataFrame(data = {'Time_step':X, 'Observed': Y, 
                                             'Train_Prediction': Train['13-Month Smoothed Total Sunspot Number'], 
                                             'Test_Prediction':Test['13-Month Smoothed Total Sunspot Number']},
                                    index = Y.index,)
Predict_Monthly

plt.figure(figsize=(30,7))
plt.title("Prediction Plot")
plt.xlabel("Month")
plt.ylabel("Sunspot Count")
plt.plot(Predict_Monthly.index, Predict_Monthly.Observed)

plt.figure(figsize=(30,7))
plt.title("Prediction Plot Comparison")
plt.xlabel("Month")
plt.ylabel("Sunspot Count")
plt.plot(Predict_Monthly.index, Predict_Monthly.Observed, c = 'black')
plt.scatter(Predict_Monthly.index, Predict_Monthly.Train_Prediction, 
            marker = 'o', c = 'blue', alpha = 0.75)
plt.scatter(Predict_Monthly.index, Predict_Monthly.Test_Prediction, 
            marker = 'o', c = 'orange', alpha = 0.75)
plt.show()